pipeline {
    agent any

    parameters {
        choice(name: 'ACTION', choices: ['APPLY', 'DESTROY'], description: 'Choose whether to apply or destroy infra')
    }

    environment {
        AWS_REGION   = "us-east-1"
        TF_DIR       = "terraform"
        KUBECONFIG   = "${env.WORKSPACE}/kubeconfig"
    }

    stages {
        stage('Terraform Init') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-ecr']]) {
                    sh """
                    cd $TF_DIR
                    terraform init -reconfigure -force-copy -input=false
                    terraform validate
                    """
                }
            }
        }

        stage('Terraform Plan') {
            when { expression { params.ACTION == 'APPLY' } }
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-ecr']]) {
                    sh """
                    cd $TF_DIR
                    terraform plan -input=false -out=tfplan
                    """
                }
            }
        }

        stage('Terraform Apply') {
            when { expression { params.ACTION == 'APPLY' } }
            steps {
                input message: "Approve infra apply?", ok: "Apply"
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-ecr']]) {
                    sh """
                    cd $TF_DIR
                    terraform apply -input=false -auto-approve tfplan
                    """
                }
            }
        }

        stage('Terraform Destroy') {
            when { expression { params.ACTION == 'DESTROY' } }
            steps {
                input message: "⚠️ Are you sure you want to destroy infra (tfstate bucket will be kept)?", ok: "Destroy"
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-ecr']]) {
                    sh """
                    cd $TF_DIR
                    terraform destroy -auto-approve \
                      -target=aws_vpc.main \
                      -target=aws_subnet.public \
                      -target=aws_subnet.private \
                      -target=aws_nat_gateway.nat \
                      -target=aws_internet_gateway.igw \
                      -target=aws_eks_cluster.main \
                      -target=aws_eks_node_group.node_group \
                      -target=aws_db_instance.rds \
                      -target=aws_s3_bucket.dr_bucket \
                      -target=aws_s3_bucket.dr_bucket_secondary \
                      -target=aws_sns_topic.alerts \
                      -target=aws_iam_role.eks_cluster_role \
                      -target=aws_iam_role.eks_node_role \
                      -target=aws_iam_role.alb_sa_role \
                      -target=aws_iam_role.s3_replication_role
                    """
                }
            }
        }
    }

    post {
        success {
            echo "✅ Terraform ${params.ACTION} finished successfully!"
        }
        failure {
            echo "❌ Terraform ${params.ACTION} failed!"
        }
    }
}
