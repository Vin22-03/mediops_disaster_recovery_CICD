pipeline {
    agent any

    parameters {
        string(name: 'VERSION_TAG', defaultValue: 'latest', description: 'Docker image version to deploy')
        choice(name: 'DEPLOY_COLOR', choices: ['blue', 'green'], description: 'Choose which version to deploy')
        booleanParam(name: 'APPLY_SERVICES', defaultValue: false, description: 'Apply base Service/Ingress YAMLs (first deploy only)')
    }

    environment {
        CLUSTER_NAME   = "mediops-eks"
        AWS_REGION     = "us-east-1"
        ECR_URL        = "921483785411.dkr.ecr.us-east-1.amazonaws.com"
        APP_NAME       = "mediops-app"
        KUBECONFIG     = "${env.WORKSPACE}/kubeconfig"
        SNS_TOPIC_ARN  = "arn:aws:sns:us-east-1:921483785411:mediops-alerts"
        K8S_NAMESPACE  = "mediops"
    }

    stages {

        stage('Configure kubeconfig') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-ecr']]) {
                    sh '''
                        echo "‚öôÔ∏è Setting up kubeconfig"
                        aws eks update-kubeconfig \
                          --name $CLUSTER_NAME \
                          --region $AWS_REGION \
                          --kubeconfig $KUBECONFIG
                    '''
                }
            }
        }

        stage('Deploy App') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-ecr']]) {
                    script {
                        def deployColor = params.DEPLOY_COLOR.toLowerCase()
                        def image = "${ECR_URL}/${APP_NAME}:${params.VERSION_TAG}"

                        echo "üöÄ Deploying ${image} to ${deployColor} deployment"

                        sh """
                        # Ensure namespace exists
                        kubectl --kubeconfig=$KUBECONFIG apply -f k8s/namespace.yaml

                        # Apply deployment if missing, then update image
                        kubectl --kubeconfig=$KUBECONFIG apply -f k8s/${deployColor}-deployment.yaml -n $K8S_NAMESPACE
                        kubectl --kubeconfig=$KUBECONFIG -n $K8S_NAMESPACE set image deployment/mediops-app-${deployColor} mediops-app=$ECR_URL/$APP_NAME:${params.VERSION_TAG}
                        """
                    }
                }
            }
        }

        stage('Apply Base Services & Ingress') {
            when { expression { params.APPLY_SERVICES } }
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-ecr']]) {
                    sh """
                    kubectl --kubeconfig=$KUBECONFIG apply -f k8s/service.yaml -n $K8S_NAMESPACE
                    kubectl --kubeconfig=$KUBECONFIG apply -f k8s/ingress.yaml -n $K8S_NAMESPACE
                    """
                }
            }
        }

        stage('Switch Traffic (Service selector)') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-ecr']]) {
                    script {
                        def deployColor = params.DEPLOY_COLOR.toLowerCase()
                        echo "üîÑ Switching traffic to ${deployColor}"
                        sh """
                        kubectl --kubeconfig=$KUBECONFIG -n $K8S_NAMESPACE patch service mediops-svc \
                          -p '{"spec":{"selector":{"app":"mediops","track":"${deployColor}"}}}'
                        """
                    }
                }
            }
        }

        stage('Verify & Rollback if Needed') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-ecr']]) {
                    script {
                        def deployColor = params.DEPLOY_COLOR.toLowerCase()
                        def stableColor = (deployColor == "blue") ? "green" : "blue"

                        echo "üîç Verifying rollout for ${deployColor}..."
                        def rolloutStatus = sh(
                            script: "kubectl --kubeconfig=$KUBECONFIG -n $K8S_NAMESPACE rollout status deployment/mediops-app-${deployColor} --timeout=60s || echo FAIL",
                            returnStdout: true
                        ).trim()

                        if (rolloutStatus.contains("FAIL")) {
                            echo "‚ùå Rollout failed for ${deployColor}! Rolling back to ${stableColor}..."

                            sh """
                            kubectl --kubeconfig=$KUBECONFIG -n $K8S_NAMESPACE patch service mediops-svc \
                              -p '{"spec":{"selector":{"app":"mediops","track":"${stableColor}"}}}'
                            """

                            sh """
                            aws sns publish \
                              --topic-arn $SNS_TOPIC_ARN \
                              --region $AWS_REGION \
                              --message "üö® MediOps Rollback triggered! Failed ${deployColor}, rolled back to ${stableColor}. Build: ${BUILD_URL}"
                            """

                            error("üö® Rollout failed ‚Äî rolled back traffic to ${stableColor}")
                        } else {
                            echo "‚úÖ Rollout successful for ${deployColor}!"
                        }
                    }
                }
            }
        }

        stage('Post-Deployment Status') {
            steps {
                sh """
                kubectl --kubeconfig=$KUBECONFIG get pods -n $K8S_NAMESPACE -o wide
                kubectl --kubeconfig=$KUBECONFIG get svc -n $K8S_NAMESPACE
                kubectl --kubeconfig=$KUBECONFIG get ingress mediops-ing -n $K8S_NAMESPACE -o wide
                """
            }
        }
    }

    post {
        success { echo "‚úÖ CD pipeline completed successfully!" }
        failure { echo "‚ùå CD pipeline failed. Check rollback logs." }
    }
}
